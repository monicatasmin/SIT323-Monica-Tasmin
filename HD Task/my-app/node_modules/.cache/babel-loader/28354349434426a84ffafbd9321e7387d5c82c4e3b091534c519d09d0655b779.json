{"ast":null,"code":"const md5 = require('./md5');\n\n/**\n * Avatar is a JavaScript library for showing Gravatars or generating user avatars.\n *\n * @property {HTMLImageElement} element The image DOM node\n * @property {object} settings Settings\n * @class\n */\nclass Avatar {\n  /**\n   * Return an Avatar instance.\n   *\n   * @param {HTMLImageElement} element The image node to target.\n   * @param {object} [options={}] Settings\n   * @class\n   */\n  constructor(element) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!element) {\n      throw new Error('No image element provided.');\n    }\n    this.element = element;\n    this.settings = {\n      size: 80,\n      fallbackImage: \"data:image/svg+xml,%3Csvg width='60' xmlns='http://www.w3.org/2000/svg' height='60' viewBox='0 0 60 60'%3E%3Cpath fill='%23bcc7ce' d='M0 0h60v60h-60z'/%3E%3Cg fill-rule='evenodd'%3E%3Cpath fill='%23a4b1b9' d='M30.1 54.8c-6.7 0-13.1-2.8-17.6-7.7l-.5-.5v-2.6h.2c.4-4 1.6-6.7 3.4-7.6 1.3-.6 2.9-1.1 4.9-1.6v-1l1-.3s.7-.2 1.7-.5c0-.5-.1-.7-.1-.9-.6-1-1.5-3.3-2.1-6l-1.7-1.4.2-.9s.2-.9 0-1.9c-.2-.9.1-1.5.3-1.8.3-.3.6-.5 1-.6.3-1.6.9-3.1 1.7-4.3-1.3-1.5-1.7-2.6-1.5-3.5.2-.9 1-1.5 1.9-1.5.7 0 1.3.3 1.9.6.3-.7.9-1.1 1.7-1.1.7 0 1.4.4 2.4.8.5.3 1.2.6 1.6.7 3.4.1 7.6 2.2 8.9 7.6.3.1.6.3.8.5.4.5.5 1.1.3 1.9-.2 1.2 0 2.4 0 2.4l.2.8-1.2 1.2c-.5 2.8-1.6 5.4-2.2 6.5-.1.1-.1.4-.1.8 1 .3 1.7.5 1.7.5l1 .4v.8c2.5.5 4.6 1.1 6.1 1.9 1.8.9 2.9 3.5 3.4 7.8l.1.6-.4.5c-4.6 5.9-11.5 9.4-19 9.4z'/%3E%3Cpath fill='%23fff' d='M45.4 36.8c-1.5-.8-3.9-1.5-7-2v-.9s-1-.4-2.6-.7c-.2-.8-.3-2 .2-2.8.5-.9 1.7-3.6 2.1-6.5l.9-.9s-.3-1.4 0-3c.2-.9-.4-.7-.9-.5-.9-7.1-6.3-7.7-7.8-7.7-1.4-.2-3.9-2.2-4.1-1.3-.1.9 1.2 1.8-.4 1.4-1.6-.4-3.1-1.8-3.3-.8-.2.7 1.2 2.3 2 3.1-1.2 1.3-2.1 3.2-2.4 6.1-.5-.3-1.4-.7-1.1.2.3 1.3 0 2.6 0 2.6l1.4 1.2c.5 2.7 1.5 5.1 2 6 .5.8.3 2.1.2 2.8-1.5.3-2.6.7-2.6.7v1.2c-2.5.5-4.4 1.1-5.8 1.7-2 1-2.6 5.7-2.7 7.9v.4c4.1 4.4 10 7.2 16.5 7.2 7.3 0 13.7-3.5 17.8-8.8-.1-2.3-.8-5.7-2.4-6.6z'/%3E%3C/g%3E%3C/svg%3E\",\n      setSourceCallback: () => {},\n      primarySource: '',\n      // Initial Specific\n      initials: '',\n      color: '#888888',\n      background: '#f4f6f7',\n      fontSize: 0,\n      fontWeight: 100,\n      fontFamily: \"'Lato', 'Lato-Regular', 'Helvetica Neue'\",\n      offsetX: undefined,\n      offsetY: undefined,\n      width: undefined,\n      height: undefined,\n      // Gravatar Specific\n      useGravatar: true,\n      useGravatarFallback: false,\n      hash: '',\n      email: '',\n      fallback: 'mm',\n      rating: 'x',\n      forcedefault: false,\n      // Github Specific\n      githubId: 0,\n      ...options\n    };\n    let source = this.settings.fallbackImage;\n    if (this.settings.primarySource) {\n      source = this.settings.primarySource;\n    } else if (this.settings.useGravatar && this.settings.useGravatarFallback) {\n      source = Avatar.gravatarUrl(this.settings);\n    } else if (this.settings.useGravatar) {\n      this.gravatarValid();\n    } else if (this.settings.githubId) {\n      source = Avatar.githubAvatar(this.settings);\n    } else if (this.settings.initials.length > 0) {\n      source = Avatar.initialAvatar(this.settings);\n    }\n    this.setSource(source);\n  }\n\n  /**\n   * Return an Avatar instance.\n   *\n   * @static\n   * @param {HTMLImageElement} element The image node to target.\n   * @param {object} settings Settings\n   * @returns {Avatar} The new instance\n   */\n  static from(element, settings) {\n    return new Avatar(element, settings);\n  }\n\n  /**\n   * Sets the element `src` attribute.\n   *\n   * @param {string} source The source to set to `src`.\n   */\n  setSource(source) {\n    if (!this.element) {\n      throw new Error('No image element set.');\n    }\n    if (source) {\n      this.element.src = source;\n      this.settings.setSourceCallback(source);\n    }\n  }\n\n  /**\n   * Attempts to create an image node with a Gravatar URL using the existing settings.\n   */\n  gravatarValid() {\n    if (!this.settings.email && !this.settings.hash) {\n      return;\n    }\n    const id = this.settings.email ? md5(this.settings.email) : this.settings.hash;\n    const image = new window.Image();\n    image.addEventListener('load', this.gravatarValidOnLoad.bind(this));\n    image.addEventListener('error', this.gravatarValidOnError.bind(this));\n    image.src = `https://secure.gravatar.com/avatar/${id}?d=404`;\n  }\n  gravatarValidOnLoad() {\n    this.setSource(Avatar.gravatarUrl(this.settings));\n  }\n  gravatarValidOnError() {\n    if (this.settings.initials.length > 0) {\n      this.setSource(Avatar.initialAvatar(this.settings));\n      return;\n    }\n    this.setSource(this.settings.fallbackImage);\n  }\n\n  /**\n   * Creates an avatar from\n   *\n   * @param {object} settings Settings\n   * @param {number} settings.size The width & height of the output image\n   * @param {number|undefined} settings.width The width of the output image\n   * @param {number|undefined} settings.height The height of the output image\n   * @param {string} settings.initials Initials to be used\n   * @param {string} settings.background Avatar Background Color\n   * @param {string} settings.color Avatar Text Color\n   * @param {number} settings.fontSize Text Size in pixels\n   * @param {number} settings.fontWeight Font weight (numeric value for light, bold, etc.)\n   * @param {string} settings.fontFamily Font family to use for the initials\n   * @param {number} [settings.offsetX] Text X position in pixels, defaults to: width / 2\n   * @param {number} [settings.offsetY] Text Y position in pixels, defaults to: height / 2\n   * @returns {string} A Base64 Data URL string with a PNG image representation of the avatar or an empty string.\n   */\n  static initialAvatar(settings) {\n    let canvas;\n    /* c8 ignore start */\n    try {\n      canvas = document.createElement('canvas');\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Canvas related error:', error);\n      return '';\n    }\n    /* c8 ignore end */\n    const width = settings.width ? settings.width : settings.size;\n    const height = settings.height ? settings.height : settings.size;\n    const devicePixelRatio = Math.max(window.devicePixelRatio, 1);\n    canvas.width = width * devicePixelRatio;\n    canvas.height = height * devicePixelRatio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    const context = canvas.getContext('2d');\n    // If the context is not avaliable for some reason, return early.\n    /* c8 ignore start */\n    if (!context) {\n      // eslint-disable-next-line no-console\n      console.error('Canvas context error.');\n      return '';\n    }\n    /* c8 ignore end */\n\n    const x = settings.offsetX ? settings.offsetX : width / 2;\n    const y = settings.offsetY ? settings.offsetY : height / 2;\n    context.scale(devicePixelRatio, devicePixelRatio);\n    context.rect(0, 0, canvas.width, canvas.height);\n    context.fillStyle = settings.background;\n    context.fill();\n    context.font = `${settings.fontWeight} ${settings.fontSize || height / 2}px ${settings.fontFamily}`;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.fillStyle = settings.color;\n    context.fillText(settings.initials, x, y);\n\n    /* c8 ignore next */\n    return canvas.toDataURL('image/png');\n  }\n\n  /**\n   * Build a Gravatar avatar URL.\n   *\n   * @static\n   * @param {object} settings Settings\n   * @param {number} settings.size The image resolution (width & height), defaults to 80\n   * @param {string} settings.email The email for the Gravatar hash\n   * @param {string} settings.hash The Gravatar hash\n   * @param {string} settings.fallback The Gravatar fallback setting, defaults to `mm`\n   * @param {string} settings.rating The Gravatar rating setting, defaults to `x`\n   * @param {boolean} settings.forcedefault The Gravatar forcedefault setting\n   * @returns {string} A URL to a Gravatar avatar\n   */\n  static gravatarUrl(_ref) {\n    let {\n      size = 80,\n      email = '',\n      hash = '',\n      fallback = 'mm',\n      rating = 'x',\n      forcedefault = false\n    } = _ref;\n    size = size && size >= 1 && size <= 2048 ? size : 80;\n    let email_or_hash = hash || email;\n    email_or_hash = email_or_hash.toLowerCase().trim();\n    if (!email_or_hash || typeof email_or_hash !== 'string') {\n      email_or_hash = '00000000000000000000000000000000';\n    }\n    hash = email_or_hash.includes('@') ? md5(email_or_hash) : email_or_hash;\n    const d = fallback ? encodeURIComponent(fallback) : 'mm';\n    const r = rating || 'x';\n    const force = forcedefault ? '&f=y' : '';\n    return `https://secure.gravatar.com/avatar/${hash}?s=${size}&d=${d}&r=${r}${force}`;\n  }\n\n  /**\n   * Build a GitHub avatar URL.\n   *\n   * @static\n   * @param {object} settings Settings\n   * @param {number|string} settings.githubId The GitHub User ID\n   * @param {number} settings.size The image resolution width & height\n   * @returns {string} A URL to a GitHub avatar\n   */\n  static githubAvatar(_ref2) {\n    let {\n      githubId = 0,\n      size = 80\n    } = _ref2;\n    return `https://avatars.githubusercontent.com/u/${githubId}?s=${size}&v=4`;\n  }\n}\nmodule.exports = Avatar;","map":{"version":3,"names":["md5","require","Avatar","constructor","element","options","arguments","length","undefined","Error","settings","size","fallbackImage","setSourceCallback","primarySource","initials","color","background","fontSize","fontWeight","fontFamily","offsetX","offsetY","width","height","useGravatar","useGravatarFallback","hash","email","fallback","rating","forcedefault","githubId","source","gravatarUrl","gravatarValid","githubAvatar","initialAvatar","setSource","from","src","id","image","window","Image","addEventListener","gravatarValidOnLoad","bind","gravatarValidOnError","canvas","document","createElement","error","console","devicePixelRatio","Math","max","style","context","getContext","x","y","scale","rect","fillStyle","fill","font","textAlign","textBaseline","fillText","toDataURL","_ref","email_or_hash","toLowerCase","trim","includes","d","encodeURIComponent","r","force","_ref2","module","exports"],"sources":["/Users/monicavalentina/Desktop/SIT323/code/HDTASK/my-app/node_modules/avatar-initials/src/avatar.js"],"sourcesContent":["const md5 = require('./md5');\n\n/**\n * Avatar is a JavaScript library for showing Gravatars or generating user avatars.\n *\n * @property {HTMLImageElement} element The image DOM node\n * @property {object} settings Settings\n * @class\n */\nclass Avatar {\n  /**\n   * Return an Avatar instance.\n   *\n   * @param {HTMLImageElement} element The image node to target.\n   * @param {object} [options={}] Settings\n   * @class\n   */\n  constructor(element, options = {}) {\n    if (!element) {\n      throw new Error('No image element provided.');\n    }\n\n    this.element = element;\n    this.settings = {\n      size: 80,\n      fallbackImage: \"data:image/svg+xml,%3Csvg width='60' xmlns='http://www.w3.org/2000/svg' height='60' viewBox='0 0 60 60'%3E%3Cpath fill='%23bcc7ce' d='M0 0h60v60h-60z'/%3E%3Cg fill-rule='evenodd'%3E%3Cpath fill='%23a4b1b9' d='M30.1 54.8c-6.7 0-13.1-2.8-17.6-7.7l-.5-.5v-2.6h.2c.4-4 1.6-6.7 3.4-7.6 1.3-.6 2.9-1.1 4.9-1.6v-1l1-.3s.7-.2 1.7-.5c0-.5-.1-.7-.1-.9-.6-1-1.5-3.3-2.1-6l-1.7-1.4.2-.9s.2-.9 0-1.9c-.2-.9.1-1.5.3-1.8.3-.3.6-.5 1-.6.3-1.6.9-3.1 1.7-4.3-1.3-1.5-1.7-2.6-1.5-3.5.2-.9 1-1.5 1.9-1.5.7 0 1.3.3 1.9.6.3-.7.9-1.1 1.7-1.1.7 0 1.4.4 2.4.8.5.3 1.2.6 1.6.7 3.4.1 7.6 2.2 8.9 7.6.3.1.6.3.8.5.4.5.5 1.1.3 1.9-.2 1.2 0 2.4 0 2.4l.2.8-1.2 1.2c-.5 2.8-1.6 5.4-2.2 6.5-.1.1-.1.4-.1.8 1 .3 1.7.5 1.7.5l1 .4v.8c2.5.5 4.6 1.1 6.1 1.9 1.8.9 2.9 3.5 3.4 7.8l.1.6-.4.5c-4.6 5.9-11.5 9.4-19 9.4z'/%3E%3Cpath fill='%23fff' d='M45.4 36.8c-1.5-.8-3.9-1.5-7-2v-.9s-1-.4-2.6-.7c-.2-.8-.3-2 .2-2.8.5-.9 1.7-3.6 2.1-6.5l.9-.9s-.3-1.4 0-3c.2-.9-.4-.7-.9-.5-.9-7.1-6.3-7.7-7.8-7.7-1.4-.2-3.9-2.2-4.1-1.3-.1.9 1.2 1.8-.4 1.4-1.6-.4-3.1-1.8-3.3-.8-.2.7 1.2 2.3 2 3.1-1.2 1.3-2.1 3.2-2.4 6.1-.5-.3-1.4-.7-1.1.2.3 1.3 0 2.6 0 2.6l1.4 1.2c.5 2.7 1.5 5.1 2 6 .5.8.3 2.1.2 2.8-1.5.3-2.6.7-2.6.7v1.2c-2.5.5-4.4 1.1-5.8 1.7-2 1-2.6 5.7-2.7 7.9v.4c4.1 4.4 10 7.2 16.5 7.2 7.3 0 13.7-3.5 17.8-8.8-.1-2.3-.8-5.7-2.4-6.6z'/%3E%3C/g%3E%3C/svg%3E\",\n      setSourceCallback: () => {},\n      primarySource: '',\n      // Initial Specific\n      initials: '',\n      color: '#888888',\n      background: '#f4f6f7',\n      fontSize: 0,\n      fontWeight: 100,\n      fontFamily: \"'Lato', 'Lato-Regular', 'Helvetica Neue'\",\n      offsetX: undefined,\n      offsetY: undefined,\n      width: undefined,\n      height: undefined,\n      // Gravatar Specific\n      useGravatar: true,\n      useGravatarFallback: false,\n      hash: '',\n      email: '',\n      fallback: 'mm',\n      rating: 'x',\n      forcedefault: false,\n      // Github Specific\n      githubId: 0,\n      ...options,\n    };\n\n    let source = this.settings.fallbackImage;\n    if (this.settings.primarySource) {\n      source = this.settings.primarySource;\n    } else if (this.settings.useGravatar && this.settings.useGravatarFallback) {\n      source = Avatar.gravatarUrl(this.settings);\n    } else if (this.settings.useGravatar) {\n      this.gravatarValid();\n    } else if (this.settings.githubId) {\n      source = Avatar.githubAvatar(this.settings);\n    } else if (this.settings.initials.length > 0) {\n      source = Avatar.initialAvatar(this.settings);\n    }\n\n    this.setSource(source);\n  }\n\n  /**\n   * Return an Avatar instance.\n   *\n   * @static\n   * @param {HTMLImageElement} element The image node to target.\n   * @param {object} settings Settings\n   * @returns {Avatar} The new instance\n   */\n  static from(element, settings) {\n    return new Avatar(element, settings);\n  }\n\n  /**\n   * Sets the element `src` attribute.\n   *\n   * @param {string} source The source to set to `src`.\n   */\n  setSource(source) {\n    if (!this.element) {\n      throw new Error('No image element set.');\n    }\n    if (source) {\n      this.element.src = source;\n      this.settings.setSourceCallback(source);\n    }\n  }\n\n  /**\n   * Attempts to create an image node with a Gravatar URL using the existing settings.\n   */\n  gravatarValid() {\n    if (!this.settings.email && !this.settings.hash) {\n      return;\n    }\n    const id = this.settings.email ? md5(this.settings.email) : this.settings.hash;\n    const image = new window.Image();\n    image.addEventListener('load', this.gravatarValidOnLoad.bind(this));\n    image.addEventListener('error', this.gravatarValidOnError.bind(this));\n    image.src = `https://secure.gravatar.com/avatar/${id}?d=404`;\n  }\n\n  gravatarValidOnLoad() {\n    this.setSource(Avatar.gravatarUrl(this.settings));\n  }\n\n  gravatarValidOnError() {\n    if (this.settings.initials.length > 0) {\n      this.setSource(Avatar.initialAvatar(this.settings));\n      return;\n    }\n    this.setSource(this.settings.fallbackImage);\n  }\n\n  /**\n   * Creates an avatar from\n   *\n   * @param {object} settings Settings\n   * @param {number} settings.size The width & height of the output image\n   * @param {number|undefined} settings.width The width of the output image\n   * @param {number|undefined} settings.height The height of the output image\n   * @param {string} settings.initials Initials to be used\n   * @param {string} settings.background Avatar Background Color\n   * @param {string} settings.color Avatar Text Color\n   * @param {number} settings.fontSize Text Size in pixels\n   * @param {number} settings.fontWeight Font weight (numeric value for light, bold, etc.)\n   * @param {string} settings.fontFamily Font family to use for the initials\n   * @param {number} [settings.offsetX] Text X position in pixels, defaults to: width / 2\n   * @param {number} [settings.offsetY] Text Y position in pixels, defaults to: height / 2\n   * @returns {string} A Base64 Data URL string with a PNG image representation of the avatar or an empty string.\n   */\n  static initialAvatar(settings) {\n    let canvas;\n    /* c8 ignore start */\n    try {\n      canvas = document.createElement('canvas');\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Canvas related error:', error);\n      return '';\n    }\n    /* c8 ignore end */\n    const width = settings.width ? settings.width : settings.size;\n    const height = settings.height ? settings.height : settings.size;\n    const devicePixelRatio = Math.max(window.devicePixelRatio, 1);\n    canvas.width = width * devicePixelRatio;\n    canvas.height = height * devicePixelRatio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    const context = canvas.getContext('2d');\n    // If the context is not avaliable for some reason, return early.\n    /* c8 ignore start */\n    if (!context) {\n      // eslint-disable-next-line no-console\n      console.error('Canvas context error.');\n      return '';\n    }\n    /* c8 ignore end */\n\n    const x = settings.offsetX ? settings.offsetX : (width / 2);\n    const y = settings.offsetY ? settings.offsetY : (height / 2);\n\n    context.scale(devicePixelRatio, devicePixelRatio);\n    context.rect(0, 0, canvas.width, canvas.height);\n    context.fillStyle = settings.background;\n    context.fill();\n    context.font = `${settings.fontWeight} ${settings.fontSize || height / 2}px ${settings.fontFamily}`;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.fillStyle = settings.color;\n    context.fillText(settings.initials, x, y);\n\n    /* c8 ignore next */\n    return canvas.toDataURL('image/png');\n  }\n\n  /**\n   * Build a Gravatar avatar URL.\n   *\n   * @static\n   * @param {object} settings Settings\n   * @param {number} settings.size The image resolution (width & height), defaults to 80\n   * @param {string} settings.email The email for the Gravatar hash\n   * @param {string} settings.hash The Gravatar hash\n   * @param {string} settings.fallback The Gravatar fallback setting, defaults to `mm`\n   * @param {string} settings.rating The Gravatar rating setting, defaults to `x`\n   * @param {boolean} settings.forcedefault The Gravatar forcedefault setting\n   * @returns {string} A URL to a Gravatar avatar\n   */\n  static gravatarUrl({ size = 80, email = '', hash = '', fallback = 'mm', rating = 'x', forcedefault = false }) {\n    size = size && (size >= 1 && size <= 2048) ? size : 80;\n    let email_or_hash = hash || email;\n    email_or_hash = email_or_hash.toLowerCase().trim();\n    if (!email_or_hash || typeof email_or_hash !== 'string') {\n      email_or_hash = '00000000000000000000000000000000';\n    }\n\n    hash = email_or_hash.includes('@') ? md5(email_or_hash) : email_or_hash;\n    const d = fallback ? encodeURIComponent(fallback) : 'mm';\n    const r = rating || 'x';\n    const force = forcedefault ? '&f=y' : '';\n\n    return `https://secure.gravatar.com/avatar/${hash}?s=${size}&d=${d}&r=${r}${force}`;\n  }\n\n  /**\n   * Build a GitHub avatar URL.\n   *\n   * @static\n   * @param {object} settings Settings\n   * @param {number|string} settings.githubId The GitHub User ID\n   * @param {number} settings.size The image resolution width & height\n   * @returns {string} A URL to a GitHub avatar\n   */\n  static githubAvatar({ githubId = 0, size = 80 }) {\n    return `https://avatars.githubusercontent.com/u/${githubId}?s=${size}&v=4`;\n  }\n}\n\nmodule.exports = Avatar;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}